using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace D365.Plugins
{
    class OnAssociateDisassociatePlugin : IPlugin
    {
        string primaryentityname = "opportunity";
        string relationshipName = "opportunitycompetitors_association";
        string roleName = "Sales Manager";
        string relatedEntityName = "competitor";

        public void Execute(IServiceProvider serviceProvider)
        {
            IPluginExecutionContext context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            ITracingService trace = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            string messagename = context.MessageName.ToLower();

            trace.Trace("OnAssociateDisassociatePlugin started. Message : " + messagename);

            if ((messagename == "associate" || messagename == "disassociate") && context.InputParameters.Contains("Target")
                && context.InputParameters.Contains("Relationship") && context.InputParameters.Contains("RelatedEntities"))
            {
                trace.Trace("Primary validation completed");

                EntityReference target = context.InputParameters["Target"] as EntityReference;
                string relName = ((Relationship)context.InputParameters["Relationship"]).SchemaName;

                trace.Trace("Primaryentity Name : " + target.LogicalName.ToString() + " Relationship name : " + relName);

                if (target.LogicalName.ToString() == primaryentityname && relationshipName == relName)
                {
                    IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                    IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

                    trace.Trace("Service created");

                    List<string> roleList = RetrieveSecurityRoles(service, context.UserId);

                    if (roleList.Contains(roleName))
                    {
                        trace.Trace("Role name matched. Role name : " + roleName);

                        EntityReferenceCollection relatedentities = context.InputParameters["RelatedEntities"] as EntityReferenceCollection;

                        foreach (EntityReference relatedEntity in relatedentities)
                        {
                            if (relatedEntity.LogicalName.ToString() == relatedEntityName)
                            {
                                trace.Trace("Related entity matched");

                                throw new InvalidPluginExecutionException("Case manager cannot add the record");
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Retrive user associated security role
        /// </summary>
        /// <param name="service"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        private List<string> RetrieveSecurityRoles(IOrganizationService service, Guid userId)
        {
            List<string> rolesList = new List<string>();

            string fetchXml = @"<fetch mapping=""logical"" count=""50"" version=""1.0"">
							<entity name=""role"">
								<attribute name=""name"" />
								<link-entity name=""systemuserroles"" from=""roleid"" to=""roleid"">
									<filter>
										<condition attribute=""systemuserid"" operator=""eq"" value=""{0}"" />
									</filter>
								</link-entity>
							</entity>
						</fetch>";

            fetchXml = string.Format(fetchXml, userId);

            var result = service.RetrieveMultiple(new FetchExpression(fetchXml));

            //List<Guid, string> uniqueRefCol = new List<Guid, string>();

            //foreach (var item in result.Entities)
            //{
            //    rolesList.Add(item.Attributes["name"].ToString());
            //}

            return rolesList;
        }

    }
}


